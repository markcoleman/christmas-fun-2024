name: "create release"

on:
  # Automatic trigger on version-like tags, e.g., v1.2.3
  push:
    tags:
      - 'v*.*.*'
  # Allow manual triggers in the Actions tab
  workflow_dispatch:
    inputs:
      custom_version:
        description: "Optional custom version/tag (override if no tag available)"
        required: false
        default: ""

permissions:
  contents: write  # enough for creating/publishing releases
  packages: write  # needed for pushing Docker images to GHCR
  # or use "write-all" if you prefer broader perms

jobs:
  update_release_and_build:
    runs-on: ubuntu-latest

    steps:
      # 1. Check out code so we can fetch tags, do Docker build, etc.
      - name: Check out
        uses: actions/checkout@v3

      # 2. Determine the version (either from "custom_version" input or github.ref_name)
      - name: Determine version
        id: determine_version
        run: |
          if [ "${{ github.event.inputs.custom_version }}" != "" ]; then
            echo "Using custom version: ${{ github.event.inputs.custom_version }}"
            echo "resolved_version=${{ github.event.inputs.custom_version }}" >> $GITHUB_OUTPUT
          else
            echo "No custom version provided or not applicable. Falling back to github.ref_name: ${{ github.ref_name }}"
            echo "resolved_version=${{ github.ref_name }}" >> $GITHUB_OUTPUT
          fi

      # 3. Validate that the resolved version is a real tag in this repo,
      #    unless we are ok with skipping this check if it's a manual run without a real tag.
      - name: Validate Tag
        id: validate_tag
        run: |
          # We'll fetch all remote tags so we can check if the version exists
          git fetch --tags

          # Grab the resolved_version from previous step
          VERSION="${{ steps.determine_version.outputs.resolved_version }}"

          if [ -z "$VERSION" ]; then
            echo "No version specified (empty). Failing..."
            exit 1
          fi

          # Check if git can rev-parse the version as a valid tag ref
          if git rev-parse "$VERSION" >/dev/null 2>&1; then
            echo "valid_tag=true" >> $GITHUB_OUTPUT
            echo "Tag '$VERSION' found in git history."
          else
            echo "Provided version '$VERSION' is NOT a known tag in the repo. Failing..."
            echo "valid_tag=false" >> $GITHUB_OUTPUT
            exit 1
          fi

      # 4. (Optional) Run Release Drafter to auto-generate/publish a release
      #    Only do this if the event is a push (not a manual dispatch) AND the tag is valid
      - name: Run Release Drafter
        if: ${{ github.event_name == 'push' && steps.validate_tag.outputs.valid_tag == 'true' }}
        uses: release-drafter/release-drafter@v5
        with:
          version: ${{ steps.determine_version.outputs.resolved_version }}
          publish: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # 5. (Optional) Get Release Notes if needed
      #    You might only do this on push events, or skip if manual. 
      #    We'll show an example that runs only if it's a push + valid tag
      - name: Get Release Notes
        id: get_release_notes
        if: ${{ github.event_name == 'push' && steps.validate_tag.outputs.valid_tag == 'true' }}
        uses: actions/github-script@v7
        with:
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const tag = "${{ steps.determine_version.outputs.resolved_version }}";

            const { data: release } = await github.rest.repos.getReleaseByTag({
              owner,
              repo,
              tag
            });
            
            return release.body;

      # 6. Log in to GitHub Container Registry
      - name: Log in to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # 7. Build Docker image from Dockerfile, injecting release notes or commit message as a label
      - name: Build Docker Image
        id: build_docker
        run: |
          # We'll transform multiline release notes to a single line, if we actually fetched them
          if [ "${{ steps.get_release_notes.outputs.result }}" != "" ]; then
            RELEASE_NOTES=$(echo "${{ steps.get_release_notes.outputs.result }}" | tr '\n' ' ' | sed 's/"/\\"/g')
          else
            RELEASE_NOTES="(No release notes or run was manual.)"
          fi

          # Build with 2 tags: resolved version and "latest"
          VERSION="${{ steps.determine_version.outputs.resolved_version }}"

          docker build \
            -t ghcr.io/${{ github.repository }}/my-christmas-app:$VERSION \
            -t ghcr.io/${{ github.repository }}/my-christmas-app:latest \
            --label "org.opencontainers.image.description=${RELEASE_NOTES}" \
            --label "org.opencontainers.image.version=$VERSION" \
            -f Dockerfile .

      # 8. Push Docker images
      - name: Push Docker Image (version tag)
        run: |
          VERSION="${{ steps.determine_version.outputs.resolved_version }}"
          docker push ghcr.io/${{ github.repository }}/my-christmas-app:$VERSION

      - name: Push Docker Image (latest)
        run: docker push ghcr.io/${{ github.repository }}/my-christmas-app:latest