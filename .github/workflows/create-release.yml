name: "create release"

on:
  push:
    tags:
      - 'v*.*.*'  # Trigger on tags like v1.2.3

permissions: write-all

jobs:
  update_release_and_build:
    runs-on: ubuntu-latest
    
    steps:
      # 1. Check out your repo
      - name: Check out
        uses: actions/checkout@v3

      # 2. Run Release Drafter to auto-generate/publish a release
      - name: Run Release Drafter
        uses: release-drafter/release-drafter@v5
        with:
          version: ${{ github.ref_name }}  # Use the current tag as the version
          publish: true                    # Immediately publish the release (vs. draft)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # 3. Fetch the now-published release to get its body (the notes)
      - name: Get Release Notes
        id: get_release_notes
        uses: actions/github-script@v6
        with:
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const tag = '${{ github.ref_name }}'; // e.g. 'v1.2.3'

            // Retrieve the Release by tag
            const { data: release } = await github.rest.repos.getReleaseByTag({
              owner,
              repo,
              tag
            });
            
            // The 'body' is what Release Drafter generated
            return release.body;

      # 4. Log in to GitHub Container Registry using the built-in GitHub token
      - name: Log in to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # 5. Build Docker image from Dockerfile, injecting release notes as a label
      #
      #    Weâ€™ll transform multiline release notes to a single line, so shell won't break.
      #    Then pass them to docker build via --label.
      - name: Build Docker Image
        env:
          COMMIT_MESSAGE: ${{ github.event.head_commit.message }}
        run: |
          # 1) Flatten or sanitize if it can contain newlines/quotes:
          CLEAN_MSG=$(echo "$COMMIT_MESSAGE" | tr '\n' ' ' | sed 's/"/\\"/g')
      
          # 2) Use CLEAN_MSG in your Docker build label
          docker build \
            -t ghcr.io/${{ github.repository }}/my-christmas-app:${{ github.ref_name }} \
            -t ghcr.io/${{ github.repository }}/my-christmas-app:latest \
            --label "org.opencontainers.image.description=${CLEAN_MSG}" \
            --label "org.opencontainers.image.version=${{ github.ref_name }}" \
            -f Dockerfile .

      # 6. Push both tags to GHCR
      - name: Push Docker Image (version tag)
        run: docker push ghcr.io/${{ github.repository }}/my-christmas-app:${{ github.ref_name }}

      - name: Push Docker Image (latest)
        run: docker push ghcr.io/${{ github.repository }}/my-christmas-app:latest